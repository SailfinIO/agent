name: Release Pipeline

on:
  push:
    branches:
      - main
      - rc
      - beta
      - alpha
    tags:
      - "v*.*.*" # Final releases
      - "v*.*.*-*" # Pre-release tags (alpha, beta, rc, etc.)

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_tag.outputs.tag }}
      release_upload_url: ${{ steps.get_release.outputs.release_upload_url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0 # Full history is required for proper commit analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create minimal package.json for semantic-release
        run: |
          if [ ! -f package.json ]; then
            echo '{}' > package.json
          fi

      - name: Install semantic-release and plugins
        run: |
          npm install semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/npm \
            @semantic-release/github \
            @semantic-release/git

      - name: Run semantic-release
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release || echo "No release created"

      - name: Get release tag
        id: get_tag
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            tag=${GITHUB_REF##*/}
            echo "Using tag from GITHUB_REF: $tag"
          else
            echo "Not a tag ref. Skipping tag extraction."
            # Option 1: Use semantic-release output if available (adjust as needed)
            tag=${{ steps.semantic.outputs.nextRelease.version }}
            echo "Using semantic-release output: $tag"
            # Option 2: Alternatively, exit or set a default value:
            # tag="no-tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Get release upload URL
        id: get_release
        run: |
          if [[ "$GITHUB_REF" != refs/tags/* ]]; then
            echo "Not a tag ref. Skipping release upload URL retrieval."
            exit 0
          fi
          tag=${GITHUB_REF##*/}
          echo "Retrieving release for tag: $tag"
          # Retrieve the release's upload URL without stripping the placeholder
          url=$(gh release view "$tag" --json uploadUrl --jq .uploadUrl)
          echo "Upload URL: $url"
          echo "release_upload_url=${url}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  build-and-release:
    name: Build and Release CLI
    needs: semantic-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64, arm]
        exclude:
          - goos: darwin
            goarch: arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.0"

      - name: Run tests
        run: go test ./...

      - name: Bump version in version.go
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Extract the new version from semantic-release output
          VERSION=${{ needs.semantic-release.outputs.release_tag }}
          echo "Bumping version.go to version $VERSION"

          # Update the version.go file. Adjust the sed command if you run on macOS vs Linux.
          sed -i.bak "s/var Version = \"dev\"/var Version = \"$VERSION\"/" pkg/version/version.go

          # Configure Git (you may want to use a bot account or similar)
          git config user.email "release-bot@sailfin.io"
          git config user.name "Release Bot"

          # Commit the change. The [skip ci] flag prevents triggering another CI run.
          git add pkg/version/version.go
          git commit -m "Bump version to $VERSION [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

      - name: Build CLI binary
        working-directory: cmd/agent
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -ldflags "-X 'github.com/SailfinIO/agent/pkg/version.Version=${{ needs.semantic-release.outputs.release_tag }}'" \
          -o dist/sailfin-${{ matrix.goos }}-${{ matrix.goarch }} .

      - name: Package CLI binary (Linux/macOS)
        if: matrix.goos != 'windows'
        run: |
          mkdir -p package/bin package/config
          cp cmd/agent/dist/sailfin-${{ matrix.goos }}-${{ matrix.goarch }} package/bin/sailfin
          cp pkl/AgentConfig.pkl.sample package/config/AgentConfig.pkl
          tar -czf sailfin-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz -C package .

      - name: List files
        run: ls -l

      - name: Upload CLI Binary (Linux/macOS)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.semantic-release.outputs.release_upload_url }}
          asset_path: sailfin-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          asset_name: sailfin-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          asset_content_type: application/octet-stream
